package com.ku.dku.service;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.print.attribute.standard.Fidelity;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.ku.dku.entity.MsRepairYear;
import com.ku.dku.entity.MsRunningNumber;
import com.ku.dku.entity.TxUtilityBill;
import com.ku.dku.repository.MsRunningNumberRepository;
import com.ku.dku.repository.TxUtilityBillRepository;

@Service
public class UtilityBillService {

	@Autowired private TxUtilityBillRepository txUtilityBillRepository;
	@Autowired private MsRunningNumberRepository msRunningNumberRepository;
	
	public Iterable<TxUtilityBill> TopThreeBill(long studentId){
	
		Iterable<TxUtilityBill> topThreeBaill = txUtilityBillRepository.TopThreeStudentIdOrderByRecIdDESC(studentId);		
		
		return topThreeBaill;
		
	}
	
	public TxUtilityBill TopBill(long studentId){
		
		TxUtilityBill topBill = txUtilityBillRepository.TopTxUtilityBillOrderByRecIdDESC(studentId);
		
		return topBill;
		
	}
	
	public Iterable<TxUtilityBill> findByKeyword(String key , String status, String status2){
		
		Iterable<TxUtilityBill> keyword = txUtilityBillRepository.findTxUtilityBillByKeywordDESC(key, status, status2);
		
		return keyword;
		
	}
	
	//runningNumber
	@Transactional(readOnly = false, propagation = Propagation.REQUIRES_NEW)
	public MsRunningNumber getNextNumber(int curentNumber,String description) {
		Date date = new Date();
		String dateString = new SimpleDateFormat("yyy-MM-dd HH:mm:ss.SSS").format(date);
		System.out.println("getNextNumber():Date=" + dateString);
		
		MsRunningNumber findDescrip = msRunningNumberRepository.findByDescription(description);
		MsRunningNumber number = msRunningNumberRepository.findByNumber(curentNumber);
		if (findDescrip.getDescription().equals(description)&&number!=null) {
			
			System.out.println("getNextNumber(): get current number=" + number.getNumber());
			int num = (number.getNumber() + 1);
			number.setNumber(num);
			number = msRunningNumberRepository.save(number);
			System.out.println("getNextNumber(): get number changed=" +  number.getNumber());
		}else {
			if (number == null) {
				number = new MsRunningNumber();
				number.setNumber(0);
				number.setDescription(description);
			}
			System.out.println("getNextNumber(): get current number=" + number.getNumber());
			int num = (number.getNumber() + 1);
			number.setNumber(num);
			number = msRunningNumberRepository.save(number);
			System.out.println("getNextNumber(): get number changed=" +  number.getNumber());
		}
		
		return number;
	}
}
