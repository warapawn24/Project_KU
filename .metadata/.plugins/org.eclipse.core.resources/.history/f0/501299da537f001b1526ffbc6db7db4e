package com.ku.dku.controller;

import java.util.concurrent.Executors;
import java.util.concurrent.ThreadPoolExecutor;

import javax.annotation.PostConstruct;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.ku.dku.bean.CreateRepairNumberRequest;
import com.ku.dku.bean.RepairRequest;
import com.ku.dku.bean.RepairResponse;
import com.ku.dku.bean.RepairStatusResponse;
import com.ku.dku.entity.TxRepairNotification;
import com.ku.dku.repository.TxRepairNotificationRepository;
import com.ku.dku.service.RepairService;

@RestController
@RequestMapping(value = "/user/repair")
public class RepairController {
	@Autowired private RepairService repairService;
	@Autowired private TxRepairNotificationRepository txRepairNotificationRepository;
	
	
	private ThreadPoolExecutor executor;

	@PostConstruct
	public void setup() {
		executor = (ThreadPoolExecutor) Executors.newFixedThreadPool(1);
	}
	@RequestMapping(value = "/createNoRepair", method = RequestMethod.POST)
	public @ResponseBody RepairResponse  createNo(@RequestBody CreateRepairNumberRequest request) {
		RepairResponse response = new RepairResponse();
		
		boolean create = repairService.createNo(request.getStudentId());
		
		
		
		if (create) {
			TxRepairNotification getData = txRepairNotificationRepository.findByStudentId(request.getStudentId());
			response.setRepairId(getData.getRecId());
			response.setStudentId(getData.getStudentId());
			response.setYear(getData.getYear());
			response.setYearNumber(getData.getYearNumber());
			response.setStatusResponse("success");
		}
		else {
			response.setStatusResponse("failed");
		}
		
		
		return response;
		
	}
	
	
	@RequestMapping(value = "/repairNoti", method = RequestMethod.POST)
	public @ResponseBody RepairStatusResponse repairNoti(@RequestBody RepairRequest request) {
		RepairStatusResponse response = new RepairStatusResponse();
		
		TxRepairNotification txRepairNotification = new TxRepairNotification();
		txRepairNotification.setRoomId(request.getRoomId());
		txRepairNotification.setStudentId(request.getStudentId());
		txRepairNotification.setStudentFname(request.getStudentFname());
		txRepairNotification.setStudentLname(request.getStudentLname());
		txRepairNotification.setRepairDate(request.getRepairDate());
		txRepairNotification.setRepairPhone(request.getRepairPhone());
		txRepairNotification.setRepairList(request.getRepairList());
		boolean repair = repairService.repair(txRepairNotification);
		
		if (repair) {
			txRepairNotification.setRepairStatus("not approved");
			response.setStatusResponse("success");
		}else {
			response.setStatusResponse("failed");
		}
		
		return response;
	}
}
